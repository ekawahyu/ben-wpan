- Toolchain:

  apt install gcc-avr avr-libc binutils-avr

- Building:

  make

- Uploading the firmware to a Ben (for flashing with the atusb-pgm cable):

  make HOST=<hostname> upload

  Example:

  make HOST=ben upload

  HOST defaults to "jlime".

- Flashing the boot loader:

  Prerequisite: avrdude on the Ben.

  Disconnect the atusb board from USB. Insert the atusb-pgm connector into
  the Ben. Place the atusb-pgm adapter on the exposed contact pads of the
  atusb board and push it down. Then run

  make prog

  This takes about 30 seconds. If the programming fails with an error
  message like "Yikes!  Invalid device signature.", verify that the
  atusb-pgm board is properly connected and placed, then try again.

- Uploading the application:

  Prerequisite: dfu-util installed on the PC.

  Insert atusb into the PC, then run

  make dfu

  Note: since the boot loader resets the USB bus after timing out,
  this operation can fail with a message like "No DFU capable USB device
  found". Just retry, and it will eventually get through.


HULUSB notes:
-------------
To prepare and flash the firmware on a HULUSB device some additional steps are
needed;

avr-objcopy -O ihex -R .signature -R .fuse -R .eeprom hulusb.elf hulusb.hex
dfu-programmer at90usb1287 flash hulusb.hex
dfu-programmer at90usb1287 reset

--------------------------

EKAUSB notes:
-------------
1. Prepare the bootloader once, and then use dfu-util to flash application.
   It requires to have AVRISP to flash the bootloader once, and then dfu-util
   can be used to update firmware on device boot.

2. No bootloader, direct flashing application with dfu-programmer.
   It requires to have RESET and HWB push buttons to enter DFU mode.

Build bootloader and application:
---------------------------------
make clean
make NAME=ekausb

Flashing bootloader ONCE (skip this if you choose no bootloader):
-----------------------------------------------------------------
avrdude -F -p m32u2 -c ft232h -U flash:w:boot.hex:i -U hfuse:w:0xd8:m -U lock:w:0xef:m

Confirm lfuse, hfuse, and lock (0x5E, 0xD8, 0xEF):
avrdude -F -p m32u2 -c ft232h -U lfuse:r:-:i -U hfuse:r:-:i -U lock:r:-:i

Flashing application firmware (skip this if you choose no bootloader):
----------------------------------------------------------------------
cp ekausb.bin ekausb.dfu
dfu-suffix -a ekausb.dfu -d 0x0030 -p 0x1540 -v 0x20b7
dfu-util -d 20b7:1540 -D ekausb.dfu

Direct flashing without bootloader:
-----------------------------------
avr-objcopy -O ihex -R .signature -R .fuse -R .eeprom ekausb.elf ekausb.hex
dfu-programmer atmega32u2 erase
dfu-programmer atmega32u2 flash ekausb.hex
dfu-programmer atmega32u2 reset

--------------------------

Making the toolchain:

# patches according to
# http://www.avrfreaks.net/index.php?name=PNphpBB2&file=viewtopic&p=789527

# some gcc prerequisites

apt-get remove avr-libc gcc-avr binutils-avr
apt-get install libmpfr-dev libmpc-dev

# binutils

wget https://ftp.gnu.org/gnu/binutils/binutils-2.27.tar.bz2
tar xfj binutils-2.27.tar.bz2
cd binutils-2.27
./configure --target=avr --disable-nls --disable-werror
make
make install
ln -s /usr/local/bin/avr-as /usr/bin/avr-as

# gcc

wget http://ftpmirror.gnu.org/gcc/gcc-4.5.2/gcc-4.5.2.tar.bz2
wget -O gcc_452_avr.patch http://gcc.gnu.org/bugzilla/attachment.cgi?id=23050
tar xfj gcc-4.5.2.tar.bz2
cd gcc-4.5.2
patch -p1 -s <../gcc_452_avr.patch
mkdir obj-avr
cd obj-avr
../configure --target=avr --enable-languages=c \
    --disable-nls --disable-libssp --with-dwarf2
make
make install

wget https://android.googlesource.com/toolchain/avr-libc/+archive/master/avr-libc-1.7.1.tar.gz
tar xf avr-libc-1.7.1.tar.gz
./bootstrap	# the automake at the end takes a while
./configure --build=`./config.guess` --host=avr
make
make install
